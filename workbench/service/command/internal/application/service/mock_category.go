// Code generated by MockGen. DO NOT EDIT.
// Source: category.go
//
// Generated by this command:
//
//	mockgen -source=category.go -destination=./mock_category.go -package=service
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	dto "github.com/haru-256/practical-go-grpc-micro-service/service/command/internal/application/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockCategoryService is a mock of CategoryService interface.
type MockCategoryService struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryServiceMockRecorder
	isgomock struct{}
}

// MockCategoryServiceMockRecorder is the mock recorder for MockCategoryService.
type MockCategoryServiceMockRecorder struct {
	mock *MockCategoryService
}

// NewMockCategoryService creates a new mock instance.
func NewMockCategoryService(ctrl *gomock.Controller) *MockCategoryService {
	mock := &MockCategoryService{ctrl: ctrl}
	mock.recorder = &MockCategoryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryService) EXPECT() *MockCategoryServiceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockCategoryService) Add(ctx context.Context, categoryDTO *dto.CreateCategoryDTO) (*dto.CategoryDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, categoryDTO)
	ret0, _ := ret[0].(*dto.CategoryDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockCategoryServiceMockRecorder) Add(ctx, categoryDTO any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockCategoryService)(nil).Add), ctx, categoryDTO)
}

// Delete mocks base method.
func (m *MockCategoryService) Delete(ctx context.Context, categoryDTO *dto.DeleteCategoryDTO) (*dto.CategoryDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, categoryDTO)
	ret0, _ := ret[0].(*dto.CategoryDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockCategoryServiceMockRecorder) Delete(ctx, categoryDTO any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCategoryService)(nil).Delete), ctx, categoryDTO)
}

// Update mocks base method.
func (m *MockCategoryService) Update(ctx context.Context, categoryDTO *dto.UpdateCategoryDTO) (*dto.CategoryDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, categoryDTO)
	ret0, _ := ret[0].(*dto.CategoryDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCategoryServiceMockRecorder) Update(ctx, categoryDTO any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCategoryService)(nil).Update), ctx, categoryDTO)
}
