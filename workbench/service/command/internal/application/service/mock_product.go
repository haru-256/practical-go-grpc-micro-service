// Code generated by MockGen. DO NOT EDIT.
// Source: product.go
//
// Generated by this command:
//
//	mockgen -source=product.go -destination=./mock_product.go -package=service
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	dto "github.com/haru-256/practical-go-grpc-micro-service/service/command/internal/application/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockProductService is a mock of ProductService interface.
type MockProductService struct {
	ctrl     *gomock.Controller
	recorder *MockProductServiceMockRecorder
	isgomock struct{}
}

// MockProductServiceMockRecorder is the mock recorder for MockProductService.
type MockProductServiceMockRecorder struct {
	mock *MockProductService
}

// NewMockProductService creates a new mock instance.
func NewMockProductService(ctrl *gomock.Controller) *MockProductService {
	mock := &MockProductService{ctrl: ctrl}
	mock.recorder = &MockProductServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductService) EXPECT() *MockProductServiceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockProductService) Add(ctx context.Context, ProductDTO *dto.CreateProductDTO) (*dto.ProductDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, ProductDTO)
	ret0, _ := ret[0].(*dto.ProductDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockProductServiceMockRecorder) Add(ctx, ProductDTO any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockProductService)(nil).Add), ctx, ProductDTO)
}

// Delete mocks base method.
func (m *MockProductService) Delete(ctx context.Context, productDTO *dto.DeleteProductDTO) (*dto.ProductDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, productDTO)
	ret0, _ := ret[0].(*dto.ProductDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockProductServiceMockRecorder) Delete(ctx, productDTO any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProductService)(nil).Delete), ctx, productDTO)
}

// Update mocks base method.
func (m *MockProductService) Update(ctx context.Context, productDTO *dto.UpdateProductDTO) (*dto.ProductDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, productDTO)
	ret0, _ := ret[0].(*dto.ProductDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockProductServiceMockRecorder) Update(ctx, productDTO any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProductService)(nil).Update), ctx, productDTO)
}
