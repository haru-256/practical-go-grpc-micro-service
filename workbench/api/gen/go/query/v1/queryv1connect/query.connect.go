//
//  QueryService用のParam型とResult型を定義したprotoファイル
//

// edition = "2023"; // TODO: pluginが対応したら有効化する

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: query/v1/query.proto

package queryv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/haru-256/practical-go-grpc-micro-service/api/gen/go/query/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CategoryServiceName is the fully-qualified name of the CategoryService service.
	CategoryServiceName = "query.v1.CategoryService"
	// ProductServiceName is the fully-qualified name of the ProductService service.
	ProductServiceName = "query.v1.ProductService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CategoryServiceListCategoriesProcedure is the fully-qualified name of the CategoryService's
	// ListCategories RPC.
	CategoryServiceListCategoriesProcedure = "/query.v1.CategoryService/ListCategories"
	// CategoryServiceGetCategoryByIdProcedure is the fully-qualified name of the CategoryService's
	// GetCategoryById RPC.
	CategoryServiceGetCategoryByIdProcedure = "/query.v1.CategoryService/GetCategoryById"
	// ProductServiceStreamProductsProcedure is the fully-qualified name of the ProductService's
	// StreamProducts RPC.
	ProductServiceStreamProductsProcedure = "/query.v1.ProductService/StreamProducts"
	// ProductServiceListProductsProcedure is the fully-qualified name of the ProductService's
	// ListProducts RPC.
	ProductServiceListProductsProcedure = "/query.v1.ProductService/ListProducts"
	// ProductServiceGetProductByIdProcedure is the fully-qualified name of the ProductService's
	// GetProductById RPC.
	ProductServiceGetProductByIdProcedure = "/query.v1.ProductService/GetProductById"
	// ProductServiceSearchProductsByKeywordProcedure is the fully-qualified name of the
	// ProductService's SearchProductsByKeyword RPC.
	ProductServiceSearchProductsByKeywordProcedure = "/query.v1.ProductService/SearchProductsByKeyword"
)

// CategoryServiceClient is a client for the query.v1.CategoryService service.
type CategoryServiceClient interface {
	// すべてのカテゴリを問合せして返す
	ListCategories(context.Context, *connect.Request[v1.ListCategoriesRequest]) (*connect.Response[v1.ListCategoriesResponse], error)
	// 指定されたIDのカテゴリを問合せして返す
	GetCategoryById(context.Context, *connect.Request[v1.GetCategoryByIdRequest]) (*connect.Response[v1.GetCategoryByIdResponse], error)
}

// NewCategoryServiceClient constructs a client for the query.v1.CategoryService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCategoryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CategoryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	categoryServiceMethods := v1.File_query_v1_query_proto.Services().ByName("CategoryService").Methods()
	return &categoryServiceClient{
		listCategories: connect.NewClient[v1.ListCategoriesRequest, v1.ListCategoriesResponse](
			httpClient,
			baseURL+CategoryServiceListCategoriesProcedure,
			connect.WithSchema(categoryServiceMethods.ByName("ListCategories")),
			connect.WithClientOptions(opts...),
		),
		getCategoryById: connect.NewClient[v1.GetCategoryByIdRequest, v1.GetCategoryByIdResponse](
			httpClient,
			baseURL+CategoryServiceGetCategoryByIdProcedure,
			connect.WithSchema(categoryServiceMethods.ByName("GetCategoryById")),
			connect.WithClientOptions(opts...),
		),
	}
}

// categoryServiceClient implements CategoryServiceClient.
type categoryServiceClient struct {
	listCategories  *connect.Client[v1.ListCategoriesRequest, v1.ListCategoriesResponse]
	getCategoryById *connect.Client[v1.GetCategoryByIdRequest, v1.GetCategoryByIdResponse]
}

// ListCategories calls query.v1.CategoryService.ListCategories.
func (c *categoryServiceClient) ListCategories(ctx context.Context, req *connect.Request[v1.ListCategoriesRequest]) (*connect.Response[v1.ListCategoriesResponse], error) {
	return c.listCategories.CallUnary(ctx, req)
}

// GetCategoryById calls query.v1.CategoryService.GetCategoryById.
func (c *categoryServiceClient) GetCategoryById(ctx context.Context, req *connect.Request[v1.GetCategoryByIdRequest]) (*connect.Response[v1.GetCategoryByIdResponse], error) {
	return c.getCategoryById.CallUnary(ctx, req)
}

// CategoryServiceHandler is an implementation of the query.v1.CategoryService service.
type CategoryServiceHandler interface {
	// すべてのカテゴリを問合せして返す
	ListCategories(context.Context, *connect.Request[v1.ListCategoriesRequest]) (*connect.Response[v1.ListCategoriesResponse], error)
	// 指定されたIDのカテゴリを問合せして返す
	GetCategoryById(context.Context, *connect.Request[v1.GetCategoryByIdRequest]) (*connect.Response[v1.GetCategoryByIdResponse], error)
}

// NewCategoryServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCategoryServiceHandler(svc CategoryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	categoryServiceMethods := v1.File_query_v1_query_proto.Services().ByName("CategoryService").Methods()
	categoryServiceListCategoriesHandler := connect.NewUnaryHandler(
		CategoryServiceListCategoriesProcedure,
		svc.ListCategories,
		connect.WithSchema(categoryServiceMethods.ByName("ListCategories")),
		connect.WithHandlerOptions(opts...),
	)
	categoryServiceGetCategoryByIdHandler := connect.NewUnaryHandler(
		CategoryServiceGetCategoryByIdProcedure,
		svc.GetCategoryById,
		connect.WithSchema(categoryServiceMethods.ByName("GetCategoryById")),
		connect.WithHandlerOptions(opts...),
	)
	return "/query.v1.CategoryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CategoryServiceListCategoriesProcedure:
			categoryServiceListCategoriesHandler.ServeHTTP(w, r)
		case CategoryServiceGetCategoryByIdProcedure:
			categoryServiceGetCategoryByIdHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCategoryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCategoryServiceHandler struct{}

func (UnimplementedCategoryServiceHandler) ListCategories(context.Context, *connect.Request[v1.ListCategoriesRequest]) (*connect.Response[v1.ListCategoriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("query.v1.CategoryService.ListCategories is not implemented"))
}

func (UnimplementedCategoryServiceHandler) GetCategoryById(context.Context, *connect.Request[v1.GetCategoryByIdRequest]) (*connect.Response[v1.GetCategoryByIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("query.v1.CategoryService.GetCategoryById is not implemented"))
}

// ProductServiceClient is a client for the query.v1.ProductService service.
type ProductServiceClient interface {
	// すべての商品を問合せして返す(Server streaming RPC)
	StreamProducts(context.Context, *connect.Request[v1.StreamProductsRequest]) (*connect.ServerStreamForClient[v1.StreamProductsResponse], error)
	// すべての商品を問合せして返す
	ListProducts(context.Context, *connect.Request[v1.ListProductsRequest]) (*connect.Response[v1.ListProductsResponse], error)
	// 指定されたIDの商品を問合せして返す
	GetProductById(context.Context, *connect.Request[v1.GetProductByIdRequest]) (*connect.Response[v1.GetProductByIdResponse], error)
	// 指定されたキーワードで商品を検索して返す
	SearchProductsByKeyword(context.Context, *connect.Request[v1.SearchProductsByKeywordRequest]) (*connect.Response[v1.SearchProductsByKeywordResponse], error)
}

// NewProductServiceClient constructs a client for the query.v1.ProductService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProductServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProductServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	productServiceMethods := v1.File_query_v1_query_proto.Services().ByName("ProductService").Methods()
	return &productServiceClient{
		streamProducts: connect.NewClient[v1.StreamProductsRequest, v1.StreamProductsResponse](
			httpClient,
			baseURL+ProductServiceStreamProductsProcedure,
			connect.WithSchema(productServiceMethods.ByName("StreamProducts")),
			connect.WithClientOptions(opts...),
		),
		listProducts: connect.NewClient[v1.ListProductsRequest, v1.ListProductsResponse](
			httpClient,
			baseURL+ProductServiceListProductsProcedure,
			connect.WithSchema(productServiceMethods.ByName("ListProducts")),
			connect.WithClientOptions(opts...),
		),
		getProductById: connect.NewClient[v1.GetProductByIdRequest, v1.GetProductByIdResponse](
			httpClient,
			baseURL+ProductServiceGetProductByIdProcedure,
			connect.WithSchema(productServiceMethods.ByName("GetProductById")),
			connect.WithClientOptions(opts...),
		),
		searchProductsByKeyword: connect.NewClient[v1.SearchProductsByKeywordRequest, v1.SearchProductsByKeywordResponse](
			httpClient,
			baseURL+ProductServiceSearchProductsByKeywordProcedure,
			connect.WithSchema(productServiceMethods.ByName("SearchProductsByKeyword")),
			connect.WithClientOptions(opts...),
		),
	}
}

// productServiceClient implements ProductServiceClient.
type productServiceClient struct {
	streamProducts          *connect.Client[v1.StreamProductsRequest, v1.StreamProductsResponse]
	listProducts            *connect.Client[v1.ListProductsRequest, v1.ListProductsResponse]
	getProductById          *connect.Client[v1.GetProductByIdRequest, v1.GetProductByIdResponse]
	searchProductsByKeyword *connect.Client[v1.SearchProductsByKeywordRequest, v1.SearchProductsByKeywordResponse]
}

// StreamProducts calls query.v1.ProductService.StreamProducts.
func (c *productServiceClient) StreamProducts(ctx context.Context, req *connect.Request[v1.StreamProductsRequest]) (*connect.ServerStreamForClient[v1.StreamProductsResponse], error) {
	return c.streamProducts.CallServerStream(ctx, req)
}

// ListProducts calls query.v1.ProductService.ListProducts.
func (c *productServiceClient) ListProducts(ctx context.Context, req *connect.Request[v1.ListProductsRequest]) (*connect.Response[v1.ListProductsResponse], error) {
	return c.listProducts.CallUnary(ctx, req)
}

// GetProductById calls query.v1.ProductService.GetProductById.
func (c *productServiceClient) GetProductById(ctx context.Context, req *connect.Request[v1.GetProductByIdRequest]) (*connect.Response[v1.GetProductByIdResponse], error) {
	return c.getProductById.CallUnary(ctx, req)
}

// SearchProductsByKeyword calls query.v1.ProductService.SearchProductsByKeyword.
func (c *productServiceClient) SearchProductsByKeyword(ctx context.Context, req *connect.Request[v1.SearchProductsByKeywordRequest]) (*connect.Response[v1.SearchProductsByKeywordResponse], error) {
	return c.searchProductsByKeyword.CallUnary(ctx, req)
}

// ProductServiceHandler is an implementation of the query.v1.ProductService service.
type ProductServiceHandler interface {
	// すべての商品を問合せして返す(Server streaming RPC)
	StreamProducts(context.Context, *connect.Request[v1.StreamProductsRequest], *connect.ServerStream[v1.StreamProductsResponse]) error
	// すべての商品を問合せして返す
	ListProducts(context.Context, *connect.Request[v1.ListProductsRequest]) (*connect.Response[v1.ListProductsResponse], error)
	// 指定されたIDの商品を問合せして返す
	GetProductById(context.Context, *connect.Request[v1.GetProductByIdRequest]) (*connect.Response[v1.GetProductByIdResponse], error)
	// 指定されたキーワードで商品を検索して返す
	SearchProductsByKeyword(context.Context, *connect.Request[v1.SearchProductsByKeywordRequest]) (*connect.Response[v1.SearchProductsByKeywordResponse], error)
}

// NewProductServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProductServiceHandler(svc ProductServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	productServiceMethods := v1.File_query_v1_query_proto.Services().ByName("ProductService").Methods()
	productServiceStreamProductsHandler := connect.NewServerStreamHandler(
		ProductServiceStreamProductsProcedure,
		svc.StreamProducts,
		connect.WithSchema(productServiceMethods.ByName("StreamProducts")),
		connect.WithHandlerOptions(opts...),
	)
	productServiceListProductsHandler := connect.NewUnaryHandler(
		ProductServiceListProductsProcedure,
		svc.ListProducts,
		connect.WithSchema(productServiceMethods.ByName("ListProducts")),
		connect.WithHandlerOptions(opts...),
	)
	productServiceGetProductByIdHandler := connect.NewUnaryHandler(
		ProductServiceGetProductByIdProcedure,
		svc.GetProductById,
		connect.WithSchema(productServiceMethods.ByName("GetProductById")),
		connect.WithHandlerOptions(opts...),
	)
	productServiceSearchProductsByKeywordHandler := connect.NewUnaryHandler(
		ProductServiceSearchProductsByKeywordProcedure,
		svc.SearchProductsByKeyword,
		connect.WithSchema(productServiceMethods.ByName("SearchProductsByKeyword")),
		connect.WithHandlerOptions(opts...),
	)
	return "/query.v1.ProductService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProductServiceStreamProductsProcedure:
			productServiceStreamProductsHandler.ServeHTTP(w, r)
		case ProductServiceListProductsProcedure:
			productServiceListProductsHandler.ServeHTTP(w, r)
		case ProductServiceGetProductByIdProcedure:
			productServiceGetProductByIdHandler.ServeHTTP(w, r)
		case ProductServiceSearchProductsByKeywordProcedure:
			productServiceSearchProductsByKeywordHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProductServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProductServiceHandler struct{}

func (UnimplementedProductServiceHandler) StreamProducts(context.Context, *connect.Request[v1.StreamProductsRequest], *connect.ServerStream[v1.StreamProductsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("query.v1.ProductService.StreamProducts is not implemented"))
}

func (UnimplementedProductServiceHandler) ListProducts(context.Context, *connect.Request[v1.ListProductsRequest]) (*connect.Response[v1.ListProductsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("query.v1.ProductService.ListProducts is not implemented"))
}

func (UnimplementedProductServiceHandler) GetProductById(context.Context, *connect.Request[v1.GetProductByIdRequest]) (*connect.Response[v1.GetProductByIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("query.v1.ProductService.GetProductById is not implemented"))
}

func (UnimplementedProductServiceHandler) SearchProductsByKeyword(context.Context, *connect.Request[v1.SearchProductsByKeywordRequest]) (*connect.Response[v1.SearchProductsByKeywordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("query.v1.ProductService.SearchProductsByKeyword is not implemented"))
}
