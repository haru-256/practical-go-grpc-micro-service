// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: query/v1/query.proto

package queryv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListCategoriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCategoriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCategoriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCategoriesRequestMultiError, or nil if none found.
func (m *ListCategoriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCategoriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListCategoriesRequestMultiError(errors)
	}

	return nil
}

// ListCategoriesRequestMultiError is an error wrapping multiple validation
// errors returned by ListCategoriesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCategoriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCategoriesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCategoriesRequestMultiError) AllErrors() []error { return m }

// ListCategoriesRequestValidationError is the validation error returned by
// ListCategoriesRequest.Validate if the designated constraints aren't met.
type ListCategoriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCategoriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCategoriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCategoriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCategoriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCategoriesRequestValidationError) ErrorName() string {
	return "ListCategoriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCategoriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCategoriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCategoriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCategoriesRequestValidationError{}

// Validate checks the field values on ListCategoriesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCategoriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCategoriesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCategoriesResponseMultiError, or nil if none found.
func (m *ListCategoriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCategoriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCategories() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCategoriesResponseValidationError{
						field:  fmt.Sprintf("Categories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCategoriesResponseValidationError{
						field:  fmt.Sprintf("Categories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCategoriesResponseValidationError{
					field:  fmt.Sprintf("Categories[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCategoriesResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCategoriesResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCategoriesResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCategoriesResponseValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCategoriesResponseValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCategoriesResponseValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListCategoriesResponseMultiError(errors)
	}

	return nil
}

// ListCategoriesResponseMultiError is an error wrapping multiple validation
// errors returned by ListCategoriesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCategoriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCategoriesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCategoriesResponseMultiError) AllErrors() []error { return m }

// ListCategoriesResponseValidationError is the validation error returned by
// ListCategoriesResponse.Validate if the designated constraints aren't met.
type ListCategoriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCategoriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCategoriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCategoriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCategoriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCategoriesResponseValidationError) ErrorName() string {
	return "ListCategoriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCategoriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCategoriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCategoriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCategoriesResponseValidationError{}

// Validate checks the field values on GetCategoryByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCategoryByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCategoryByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCategoryByIdRequestMultiError, or nil if none found.
func (m *GetCategoryByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCategoryByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetCategoryByIdRequestMultiError(errors)
	}

	return nil
}

// GetCategoryByIdRequestMultiError is an error wrapping multiple validation
// errors returned by GetCategoryByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCategoryByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCategoryByIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCategoryByIdRequestMultiError) AllErrors() []error { return m }

// GetCategoryByIdRequestValidationError is the validation error returned by
// GetCategoryByIdRequest.Validate if the designated constraints aren't met.
type GetCategoryByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCategoryByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCategoryByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCategoryByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCategoryByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCategoryByIdRequestValidationError) ErrorName() string {
	return "GetCategoryByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCategoryByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCategoryByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCategoryByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCategoryByIdRequestValidationError{}

// Validate checks the field values on GetCategoryByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCategoryByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCategoryByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCategoryByIdResponseMultiError, or nil if none found.
func (m *GetCategoryByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCategoryByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCategoryByIdResponseValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCategoryByIdResponseValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCategoryByIdResponseValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Result.(type) {
	case *GetCategoryByIdResponse_Category:
		if v == nil {
			err := GetCategoryByIdResponseValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCategory()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCategoryByIdResponseValidationError{
						field:  "Category",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCategoryByIdResponseValidationError{
						field:  "Category",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCategoryByIdResponseValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetCategoryByIdResponse_Error:
		if v == nil {
			err := GetCategoryByIdResponseValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCategoryByIdResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCategoryByIdResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCategoryByIdResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetCategoryByIdResponseMultiError(errors)
	}

	return nil
}

// GetCategoryByIdResponseMultiError is an error wrapping multiple validation
// errors returned by GetCategoryByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCategoryByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCategoryByIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCategoryByIdResponseMultiError) AllErrors() []error { return m }

// GetCategoryByIdResponseValidationError is the validation error returned by
// GetCategoryByIdResponse.Validate if the designated constraints aren't met.
type GetCategoryByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCategoryByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCategoryByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCategoryByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCategoryByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCategoryByIdResponseValidationError) ErrorName() string {
	return "GetCategoryByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCategoryByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCategoryByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCategoryByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCategoryByIdResponseValidationError{}

// Validate checks the field values on StreamProductsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StreamProductsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamProductsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StreamProductsRequestMultiError, or nil if none found.
func (m *StreamProductsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamProductsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StreamProductsRequestMultiError(errors)
	}

	return nil
}

// StreamProductsRequestMultiError is an error wrapping multiple validation
// errors returned by StreamProductsRequest.ValidateAll() if the designated
// constraints aren't met.
type StreamProductsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamProductsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamProductsRequestMultiError) AllErrors() []error { return m }

// StreamProductsRequestValidationError is the validation error returned by
// StreamProductsRequest.Validate if the designated constraints aren't met.
type StreamProductsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamProductsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamProductsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamProductsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamProductsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamProductsRequestValidationError) ErrorName() string {
	return "StreamProductsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StreamProductsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamProductsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamProductsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamProductsRequestValidationError{}

// Validate checks the field values on StreamProductsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StreamProductsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamProductsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StreamProductsResponseMultiError, or nil if none found.
func (m *StreamProductsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamProductsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProduct()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StreamProductsResponseValidationError{
					field:  "Product",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StreamProductsResponseValidationError{
					field:  "Product",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProduct()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StreamProductsResponseValidationError{
				field:  "Product",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StreamProductsResponseMultiError(errors)
	}

	return nil
}

// StreamProductsResponseMultiError is an error wrapping multiple validation
// errors returned by StreamProductsResponse.ValidateAll() if the designated
// constraints aren't met.
type StreamProductsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamProductsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamProductsResponseMultiError) AllErrors() []error { return m }

// StreamProductsResponseValidationError is the validation error returned by
// StreamProductsResponse.Validate if the designated constraints aren't met.
type StreamProductsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamProductsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamProductsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamProductsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamProductsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamProductsResponseValidationError) ErrorName() string {
	return "StreamProductsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StreamProductsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamProductsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamProductsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamProductsResponseValidationError{}

// Validate checks the field values on ListProductsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProductsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProductsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProductsRequestMultiError, or nil if none found.
func (m *ListProductsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProductsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListProductsRequestMultiError(errors)
	}

	return nil
}

// ListProductsRequestMultiError is an error wrapping multiple validation
// errors returned by ListProductsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListProductsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProductsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProductsRequestMultiError) AllErrors() []error { return m }

// ListProductsRequestValidationError is the validation error returned by
// ListProductsRequest.Validate if the designated constraints aren't met.
type ListProductsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductsRequestValidationError) ErrorName() string {
	return "ListProductsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductsRequestValidationError{}

// Validate checks the field values on ListProductsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProductsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProductsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProductsResponseMultiError, or nil if none found.
func (m *ListProductsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProductsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProducts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProductsResponseValidationError{
						field:  fmt.Sprintf("Products[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProductsResponseValidationError{
						field:  fmt.Sprintf("Products[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProductsResponseValidationError{
					field:  fmt.Sprintf("Products[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListProductsResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListProductsResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListProductsResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListProductsResponseValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListProductsResponseValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListProductsResponseValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListProductsResponseMultiError(errors)
	}

	return nil
}

// ListProductsResponseMultiError is an error wrapping multiple validation
// errors returned by ListProductsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListProductsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProductsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProductsResponseMultiError) AllErrors() []error { return m }

// ListProductsResponseValidationError is the validation error returned by
// ListProductsResponse.Validate if the designated constraints aren't met.
type ListProductsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductsResponseValidationError) ErrorName() string {
	return "ListProductsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductsResponseValidationError{}

// Validate checks the field values on GetProductByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductByIdRequestMultiError, or nil if none found.
func (m *GetProductByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetProductByIdRequestMultiError(errors)
	}

	return nil
}

// GetProductByIdRequestMultiError is an error wrapping multiple validation
// errors returned by GetProductByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type GetProductByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductByIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductByIdRequestMultiError) AllErrors() []error { return m }

// GetProductByIdRequestValidationError is the validation error returned by
// GetProductByIdRequest.Validate if the designated constraints aren't met.
type GetProductByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductByIdRequestValidationError) ErrorName() string {
	return "GetProductByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductByIdRequestValidationError{}

// Validate checks the field values on GetProductByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductByIdResponseMultiError, or nil if none found.
func (m *GetProductByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProductByIdResponseValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProductByIdResponseValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProductByIdResponseValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Result.(type) {
	case *GetProductByIdResponse_Product:
		if v == nil {
			err := GetProductByIdResponseValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetProduct()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetProductByIdResponseValidationError{
						field:  "Product",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetProductByIdResponseValidationError{
						field:  "Product",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetProduct()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetProductByIdResponseValidationError{
					field:  "Product",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetProductByIdResponse_Error:
		if v == nil {
			err := GetProductByIdResponseValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetProductByIdResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetProductByIdResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetProductByIdResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetProductByIdResponseMultiError(errors)
	}

	return nil
}

// GetProductByIdResponseMultiError is an error wrapping multiple validation
// errors returned by GetProductByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type GetProductByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductByIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductByIdResponseMultiError) AllErrors() []error { return m }

// GetProductByIdResponseValidationError is the validation error returned by
// GetProductByIdResponse.Validate if the designated constraints aren't met.
type GetProductByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductByIdResponseValidationError) ErrorName() string {
	return "GetProductByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductByIdResponseValidationError{}

// Validate checks the field values on SearchProductsByKeywordRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchProductsByKeywordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchProductsByKeywordRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SearchProductsByKeywordRequestMultiError, or nil if none found.
func (m *SearchProductsByKeywordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchProductsByKeywordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Keyword

	if len(errors) > 0 {
		return SearchProductsByKeywordRequestMultiError(errors)
	}

	return nil
}

// SearchProductsByKeywordRequestMultiError is an error wrapping multiple
// validation errors returned by SearchProductsByKeywordRequest.ValidateAll()
// if the designated constraints aren't met.
type SearchProductsByKeywordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchProductsByKeywordRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchProductsByKeywordRequestMultiError) AllErrors() []error { return m }

// SearchProductsByKeywordRequestValidationError is the validation error
// returned by SearchProductsByKeywordRequest.Validate if the designated
// constraints aren't met.
type SearchProductsByKeywordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchProductsByKeywordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchProductsByKeywordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchProductsByKeywordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchProductsByKeywordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchProductsByKeywordRequestValidationError) ErrorName() string {
	return "SearchProductsByKeywordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchProductsByKeywordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchProductsByKeywordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchProductsByKeywordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchProductsByKeywordRequestValidationError{}

// Validate checks the field values on SearchProductsByKeywordResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchProductsByKeywordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchProductsByKeywordResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SearchProductsByKeywordResponseMultiError, or nil if none found.
func (m *SearchProductsByKeywordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchProductsByKeywordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProducts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchProductsByKeywordResponseValidationError{
						field:  fmt.Sprintf("Products[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchProductsByKeywordResponseValidationError{
						field:  fmt.Sprintf("Products[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchProductsByKeywordResponseValidationError{
					field:  fmt.Sprintf("Products[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchProductsByKeywordResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchProductsByKeywordResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchProductsByKeywordResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchProductsByKeywordResponseValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchProductsByKeywordResponseValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchProductsByKeywordResponseValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SearchProductsByKeywordResponseMultiError(errors)
	}

	return nil
}

// SearchProductsByKeywordResponseMultiError is an error wrapping multiple
// validation errors returned by SearchProductsByKeywordResponse.ValidateAll()
// if the designated constraints aren't met.
type SearchProductsByKeywordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchProductsByKeywordResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchProductsByKeywordResponseMultiError) AllErrors() []error { return m }

// SearchProductsByKeywordResponseValidationError is the validation error
// returned by SearchProductsByKeywordResponse.Validate if the designated
// constraints aren't met.
type SearchProductsByKeywordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchProductsByKeywordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchProductsByKeywordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchProductsByKeywordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchProductsByKeywordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchProductsByKeywordResponseValidationError) ErrorName() string {
	return "SearchProductsByKeywordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchProductsByKeywordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchProductsByKeywordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchProductsByKeywordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchProductsByKeywordResponseValidationError{}
